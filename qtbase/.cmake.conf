# set (git) module specific defines, but only if we are actually qtbase
# do _not_ set them as the global toplevel configuration
# we check for QT_REPO_MODULE_VERSION before defining it below; that will
# ensure that when this file is included the second time in a toplevel buld
# (directly by qtbase) we actually add the extra definitions
if (NOT DEFINED QT_SUPERBUILD OR DEFINED QT_REPO_MODULE_VERSION)
    set(QT_EXTRA_INTERNAL_TARGET_DEFINES "QT_LEAN_HEADERS=1")
    list(APPEND QT_EXTRA_INTERNAL_TARGET_DEFINES "QT_NO_AS_CONST=1")
endif()

set(QT_REPO_MODULE_VERSION "6.5.0")
set(QT_REPO_MODULE_PRERELEASE_VERSION_SEGMENT "alpha1")

# Minimum requirement for building Qt
set(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_BUILDING_QT_SHARED "3.16")
set(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_BUILDING_QT_STATIC "3.21")

# Minimum requirement for consuming Qt in a user project.
# This might be different in the future, e.g. be lower than the requirement for
# building Qt.
set(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_USING_QT_SHARED "3.16")
set(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_USING_QT_STATIC "3.21")

# Policy settings for commands defined by qtbase. These will also be injected
# into the top level policy scope of each Qt module when building Qt so that
# modules have the same policy settings as qtbase by default. They can be
# overridden by individual Qt modules in their own .cmake.conf files if needed.
#
# NOTE: These two values are also hard-coded in QtBuildInternalsConfig.cmake
#       because that file is used in-place by a superbuild, so there is no
#       opportunity for substituting the values from here. Keep both locations
#       in sync.
set(QT_MIN_NEW_POLICY_CMAKE_VERSION "3.16")
set(QT_MAX_NEW_POLICY_CMAKE_VERSION "3.21")
